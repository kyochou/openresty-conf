location /files {
    alias /Users/kyo/Temp/openresty/upload;
    expires max;
}
location /upload {
    content_by_lua '
        -- 注意 basepath 的权限需要 worker 进程可写
        local basepath = "/Users/kyo/Temp/openresty/upload"


        local upload = require "resty.upload"
        local cjson = require "cjson"
        local uuid = require "resty.jit-uuid"
        local lfs = require "lfs"

        function get_filename(res) 
            local filename = ngx.re.match(res, [[filename="(.+)\.(.+)"]])
            if filename[2] then  
                return string.gsub(uuid(), "-", "") .. "." .. filename[2] 
            else 
                ngx.exit(400)
            end
        end 

        local form, err = upload:new(4096)
        if not form then
            ngx.log(ngx.ERR, "failed to upload: ", err)
            ngx.exit(400)
        end
        form:set_timeout(0)

        local target_file, relative_file
        while true do
            local typ, res, err = form:read()
            if not typ then
                ngx.say("failed to read: ", err)
                ngx.exit(400)
            end
            -- ngx.say("read: ", cjson.encode({typ, res}))
            if typ == "header" then
                if res[1] ~= "Content-Type" then
                    local filename = get_filename(res[2])
                    -- local relativedir = os.date("%Y%m%d")
                    local relativedir = ngx.today()
                    relative_file = relativedir .. "/" .. filename
                    local fulldir = basepath .. "/" .. relativedir
                    if lfs.attributes(fulldir, "mode") == nil then
                        os.execute("mkdir -p " .. fulldir)
                    end
                    target_file, err = io.open(fulldir .. "/" .. filename, "w")
                    if not target_file then
                        ngx.log(ngx.ERR,"failed to open file", err)
                        ngx.exit(500)
                    end
                end 
            elseif typ == "body" then
                if target_file then
                    target_file:write(res)
                end
            elseif typ == "part_end" then
                if target_file then
                    target_file:close()
                    target_file = nil
                end
            elseif typ == "eof" then
                break
            end
        end
        
        ngx.say(relative_file)
        relative_file = nil
            ';
}
